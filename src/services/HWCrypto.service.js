const config = require('config');
const HWCrypto = require('assets/lib/hwcrypto.js');
const ASN1 = require('assets/lib/asn1.js');
const Hex = require('assets/lib/hex.js');

const { dappURL } = config;

class HWCryptoService {
  getCertificate(address) {
//    const
//    const der = Hex.decode(HEX_TH);
//    const asn = ASN1.decode(der);
//    console.log('ASN: ' + asn.toPrettyString());

    return HWCrypto.getCertificate({lang: 'en'}).then((response) => {
          const der = Hex.decode(response.hex);
          const asn = ASN1.decode(der);
          console.log('ASN : ' + asn.toPrettyString());
          return asn;
        }, function(err) {
          console.log('getCertificate() failed: ' + err.message);
          return 'CERTIFICATE NOT PRESENT';
      });
  }
}

export default new HWCryptoService();
